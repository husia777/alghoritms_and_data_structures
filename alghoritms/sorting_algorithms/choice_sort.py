from random import randint



######################################################################################################################3

# Cортировка выбором
# Этот алгоритм сегментирует список на две части: отсортированную и неотсортированную.
# Наименьший элемент удаляется из второго списка и добавляется в первый.

# Затраты времени на сортировку выборкой в среднем составляют O(n²), где n — количество элементов списка.

# Алгоритм
# На практике не нужно создавать новый список для отсортированных элементов.
# В качестве минимального элемента мы устнавим самый первый элемент
# Теперь, когда нам известно, что  подсписок с первым элементом отсортирован,
# Далее в цикле мы ищем наименьший элемент и если он меньше текущего минимального элемента то меняем местами.
# Повторяем это до тех пор, пока не останется последний элемент в списке.
######################################################################################################################3

# формируем несортированный список
N = 5
a = []
for i in range(N):
    a.append(randint(0, 99))
print(a)

def choice_sort(arr):
    "Алгоритм сортировки выбором с ипользованием for"
    N = len(arr) # число элементов в списке
    for i in range(N - 1): # цикл который пробегается с первого элемента и до предпоследнего
        min_el = arr[i] # минимальный элемент
        indx_min_el = i # индекс минимального элемента
        for j in range(i + 1, N): # цикл который пробегается со второго элемента и до последнего
            if min_el > arr[j]: # если наш минимальный элемент больше текущего
                min_el = arr[j] # то минимальным элементом становится текущий
                indx_min_el = j # а индексом минимального элемента становится индекс текущего элемента
        if indx_min_el != i: #если индекс текущего минимального элемента  неравен индексу который мы ему присваивали, то
            arr[i], arr[indx_min_el] = arr[indx_min_el], arr[i] # меняем местами  текущий минимальный элемент с текущем элементом
    return arr #возвращаем отсортированный элемент


def choice_sort_by_while(l):
    "Алгоритм сортировки выбором с ипользованием while"
    n = len(l)
    while n > 0:
        l[l.index(max(l[0:n]))], l[n - 1] = l[n - 1], l[l.index(max(l[0:n]))]
        n -= 1
    return l


print(choice_sort(a))
print(choice_sort_by_while(a))
