from random import randint

######################################################################################################################3
# Сортировка вставками
# Как и сортировка выборкой, этот алгоритм сегментирует список на две части:
# отсортированную и неотсортированную.
# Алгоритм перебирает второй сегмент и
# вставляет текущий элемент в правильную позицию первого сегмента.
# Время сортировки
# Время сортировки вставками в среднем равно O(n²), где n — количество элементов списка.

# преимущество данного алгоритма позволяет досортировывать массив при появлении новых элементов в отличии от алгоритма сортировки выбором
######################################################################################################################3


# формируем несортированный список
N = 5
a = []
for i in range(N):
    a.append(randint(1, 99))
print(a)


def insertion_sort(arr):
    N = len(arr)  # число элементов в массиве
    # Сортировку начинаем со второго элемента, т.к. считается, что первый элемент уже отсортирован
    for i in range(1, N):
        for j in range(i, 0,
                       -1):  # происходит сравнение текущего элемента arr[j]  с элементами которые находятся в отсортированном подсписке до самого первого
            if arr[j] < arr[j - 1]:  # если текущий элемент меньше предыдущего
                arr[j], arr[j - 1] = arr[j - 1], arr[j]  # то меняем местами
            else:
                break  # как только мы сравнили текущий элемент со всеми элементами отсортированного подспика то цикл j завершается и берем следующий элемент
    return arr  # возвращаем отсортированный список


print(insertion_sort(a))
